// <auto-generated />
using System;
using Entities.Data;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace Entities.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20240927173435_InitialMig")]
    partial class InitialMig
    {
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "6.0.0");

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.Property<int>("CustomerId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("CustomerAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("CustomerSince")
                        .HasColumnType("TEXT");

                    b.Property<string>("CustomerType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateOfBirth")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmailAddress")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("NationalID")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("CustomerId");

                    b.ToTable("Customers");

                    b.HasData(
                        new
                        {
                            CustomerId = 1,
                            CustomerAddress = "123 Main St, Springfield",
                            CustomerName = "John Doe",
                            CustomerSince = new DateTime(2010, 5, 20, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerType = "Regular",
                            DateOfBirth = new DateTime(1985, 1, 15, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "johndoe@example.com",
                            NationalID = "1234567890",
                            PhoneNumber = "123-456-7890"
                        },
                        new
                        {
                            CustomerId = 2,
                            CustomerAddress = "456 Elm St, Springfield",
                            CustomerName = "Jane Smith",
                            CustomerSince = new DateTime(2015, 7, 18, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerType = "VIP",
                            DateOfBirth = new DateTime(1990, 3, 22, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "janesmith@example.com",
                            NationalID = "0987654321",
                            PhoneNumber = "987-654-3210"
                        },
                        new
                        {
                            CustomerId = 3,
                            CustomerAddress = "789 Oak St, Metropolis",
                            CustomerName = "Robert Brown",
                            CustomerSince = new DateTime(2008, 3, 25, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerType = "Corporate",
                            DateOfBirth = new DateTime(1975, 9, 10, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "robertbrown@example.com",
                            NationalID = "4567890123",
                            PhoneNumber = "555-123-4567"
                        },
                        new
                        {
                            CustomerId = 4,
                            CustomerAddress = "321 Pine St, Gotham",
                            CustomerName = "Emily Davis",
                            CustomerSince = new DateTime(2017, 6, 12, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerType = "Regular",
                            DateOfBirth = new DateTime(1992, 11, 5, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "emilydavis@example.com",
                            NationalID = "3216549870",
                            PhoneNumber = "321-654-9870"
                        },
                        new
                        {
                            CustomerId = 5,
                            CustomerAddress = "654 Maple St, Star City",
                            CustomerName = "Michael Johnson",
                            CustomerSince = new DateTime(2005, 1, 3, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            CustomerType = "VIP",
                            DateOfBirth = new DateTime(1980, 7, 30, 0, 0, 0, 0, DateTimeKind.Unspecified),
                            EmailAddress = "michaeljohnson@example.com",
                            NationalID = "9876543210",
                            PhoneNumber = "777-888-9999"
                        });
                });

            modelBuilder.Entity("Entities.Embellishment", b =>
                {
                    b.Property<int>("EmbellishmentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int?>("Cost")
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmbellishmentDiscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmbellishmentName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int?>("EmbellishmentTypeId")
                        .HasColumnType("INTEGER");

                    b.HasKey("EmbellishmentId");

                    b.HasIndex("EmbellishmentTypeId");

                    b.ToTable("Embellishment");
                });

            modelBuilder.Entity("Entities.EmbellishmentType", b =>
                {
                    b.Property<int>("EmbellishmentTypeId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("EmbellishmentTypeDiscription")
                        .HasColumnType("TEXT");

                    b.Property<string>("EmbellishmentTypeName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("EmbellishmentTypeId");

                    b.ToTable("EmbellishmentTypes");
                });

            modelBuilder.Entity("Entities.Measurement", b =>
                {
                    b.Property<int>("Measurementid")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<double>("ArmLength")
                        .HasColumnType("REAL");

                    b.Property<double>("Chest")
                        .HasColumnType("REAL");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("DateCreated")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("DateTaken")
                        .HasColumnType("TEXT");

                    b.Property<double>("Height")
                        .HasColumnType("REAL");

                    b.Property<double>("Leg")
                        .HasColumnType("REAL");

                    b.Property<double>("Neck")
                        .HasColumnType("REAL");

                    b.Property<double>("ShoulderWidth")
                        .HasColumnType("REAL");

                    b.Property<double>("Sleeve")
                        .HasColumnType("REAL");

                    b.Property<double>("Waist")
                        .HasColumnType("REAL");

                    b.Property<double>("trousers")
                        .HasColumnType("REAL");

                    b.HasKey("Measurementid");

                    b.HasIndex("CustomerId");

                    b.ToTable("Measurements");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Property<int>("OrderId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("ExpectedCompletionDate")
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("OrderDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("TotalCost")
                        .HasColumnType("TEXT");

                    b.HasKey("OrderId");

                    b.HasIndex("CustomerId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("Entities.OrderDesign", b =>
                {
                    b.Property<int>("DesignId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<int>("CustomerId")
                        .HasColumnType("INTEGER");

                    b.Property<int?>("EmbellishmentId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("ImageUrl")
                        .HasColumnType("TEXT");

                    b.Property<int>("MeasurementId")
                        .HasColumnType("INTEGER");

                    b.Property<string>("Notes")
                        .HasColumnType("TEXT");

                    b.Property<int>("OrderId")
                        .HasColumnType("INTEGER");

                    b.HasKey("DesignId");

                    b.HasIndex("CustomerId");

                    b.HasIndex("EmbellishmentId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderDesigns");
                });

            modelBuilder.Entity("Entities.Payment", b =>
                {
                    b.Property<int>("PaymentId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<decimal>("Amount")
                        .HasColumnType("TEXT");

                    b.Property<int?>("OrderId")
                        .HasColumnType("INTEGER");

                    b.Property<DateTime>("PaymentDate")
                        .HasColumnType("TEXT");

                    b.Property<int>("PaymentStatus")
                        .HasColumnType("INTEGER");

                    b.HasKey("PaymentId");

                    b.HasIndex("OrderId");

                    b.ToTable("Payment");
                });

            modelBuilder.Entity("Entities.Embellishment", b =>
                {
                    b.HasOne("Entities.EmbellishmentType", "EmbellishmentType")
                        .WithMany("Embellishmentes")
                        .HasForeignKey("EmbellishmentTypeId");

                    b.Navigation("EmbellishmentType");
                });

            modelBuilder.Entity("Entities.Measurement", b =>
                {
                    b.HasOne("Entities.Customer", "Customer")
                        .WithMany("Measurements")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.HasOne("Entities.Customer", "Customer")
                        .WithMany("Orders")
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");
                });

            modelBuilder.Entity("Entities.OrderDesign", b =>
                {
                    b.HasOne("Entities.Customer", "Customer")
                        .WithMany()
                        .HasForeignKey("CustomerId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Entities.Embellishment", "Embellishment")
                        .WithMany()
                        .HasForeignKey("EmbellishmentId");

                    b.HasOne("Entities.Order", "Order")
                        .WithMany()
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Customer");

                    b.Navigation("Embellishment");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Payment", b =>
                {
                    b.HasOne("Entities.Order", "Order")
                        .WithMany("Payments")
                        .HasForeignKey("OrderId");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("Entities.Customer", b =>
                {
                    b.Navigation("Measurements");

                    b.Navigation("Orders");
                });

            modelBuilder.Entity("Entities.EmbellishmentType", b =>
                {
                    b.Navigation("Embellishmentes");
                });

            modelBuilder.Entity("Entities.Order", b =>
                {
                    b.Navigation("Payments");
                });
#pragma warning restore 612, 618
        }
    }
}
